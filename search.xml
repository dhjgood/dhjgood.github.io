<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript常用工具</title>
      <link href="/2020/052746529.html"/>
      <url>/2020/052746529.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-邮箱"><a href="#1-邮箱" class="headerlink" title="1.邮箱"></a>1.邮箱</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isEmail <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="2-手机号码"><a href="#2-手机号码" class="headerlink" title="2.手机号码"></a>2.手机号码</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isMobile <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/^1[0-9]{10}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-电话号码"><a href="#3-电话号码" class="headerlink" title="3.电话号码"></a>3.电话号码</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isPhone <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/^([0-9]{3,4}-)?[0-9]{7,8}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="4-是否url地址"><a href="#4-是否url地址" class="headerlink" title="4.是否url地址"></a>4.是否url地址</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isURL <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/^http[s]?:\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="5-是否字符串"><a href="#5-是否字符串" class="headerlink" title="5.是否字符串"></a>5.是否字符串</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'String'</span><span class="token punctuation">}</span></code></pre><h4 id="6-是否数字"><a href="#6-是否数字" class="headerlink" title="6.是否数字"></a>6.是否数字</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isNumber <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Number'</span><span class="token punctuation">}</span></code></pre><h4 id="7-是否boolean"><a href="#7-是否boolean" class="headerlink" title="7.是否boolean"></a>7.是否boolean</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isBoolean <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Boolean'</span><span class="token punctuation">}</span></code></pre><h4 id="8-是否函数"><a href="#8-是否函数" class="headerlink" title="8.是否函数"></a>8.是否函数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isFunction <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Function'</span><span class="token punctuation">}</span></code></pre><h4 id="9-是否为null"><a href="#9-是否为null" class="headerlink" title="9.是否为null"></a>9.是否为null</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isNull <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Null'</span><span class="token punctuation">}</span></code></pre><h4 id="10-是否undefined"><a href="#10-是否undefined" class="headerlink" title="10.是否undefined"></a>10.是否undefined</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isUndefined <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Undefined'</span><span class="token punctuation">}</span></code></pre><h4 id="11-是否对象"><a href="#11-是否对象" class="headerlink" title="11.是否对象"></a>11.是否对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isObj <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Object'</span><span class="token punctuation">}</span></code></pre><h4 id="12-是否数组"><a href="#12-是否数组" class="headerlink" title="12.是否数组"></a>12.是否数组</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isArray <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Array'</span><span class="token punctuation">}</span>   </code></pre><h4 id="13-是否时间"><a href="#13-是否时间" class="headerlink" title="13.是否时间"></a>13.是否时间</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isDate <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Date'</span><span class="token punctuation">}</span></code></pre><h4 id="14-是否正则"><a href="#14-是否正则" class="headerlink" title="14.是否正则"></a>14.是否正则</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isRegExp <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'RegExp'</span><span class="token punctuation">}</span></code></pre><h4 id="15-是否错误对象"><a href="#15-是否错误对象" class="headerlink" title="15.是否错误对象"></a>15.是否错误对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isError <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Error'</span><span class="token punctuation">}</span></code></pre><h4 id="16-是否Symbol函数"><a href="#16-是否Symbol函数" class="headerlink" title="16.是否Symbol函数"></a>16.是否Symbol函数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isSymbol <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Symbol'</span><span class="token punctuation">}</span></code></pre><h4 id="17-是否Promise对象"><a href="#17-是否Promise对象" class="headerlink" title="17.是否Promise对象"></a>17.是否Promise对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isPromise <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Promise'</span><span class="token punctuation">}</span></code></pre><h4 id="18-是否Set对象"><a href="#18-是否Set对象" class="headerlink" title="18.是否Set对象"></a>18.是否Set对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isSet <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Set'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="19-是否是微信浏览器"><a href="#19-是否是微信浏览器" class="headerlink" title="19.是否是微信浏览器"></a>19.是否是微信浏览器</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isWeiXin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/microMessenger/i</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'micromessenger'</span><span class="token punctuation">}</span></code></pre><h4 id="20-是否是移动端"><a href="#20-是否是移动端" class="headerlink" title="20.是否是移动端"></a>20.是否是移动端</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isDeviceMobile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/android|webos|iphone|ipod|balckberry/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="21-是否是QQ浏览器"><a href="#21-是否是QQ浏览器" class="headerlink" title="21.是否是QQ浏览器"></a>21.是否是QQ浏览器</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isQQBrowser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="22-是否是爬虫"><a href="#22-是否是爬虫" class="headerlink" title="22.是否是爬虫"></a>22.是否是爬虫</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isSpider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">/</span>adsbot<span class="token operator">|</span>googlebot<span class="token operator">|</span>bingbot<span class="token operator">|</span>msnbot<span class="token operator">|</span>yandexbot<span class="token operator">|</span>baidubot<span class="token operator">|</span>robot<span class="token operator">|</span>careerbot    <span class="token operator">|</span>seznambot<span class="token operator">|</span>bot<span class="token operator">|</span>baiduspider<span class="token operator">|</span>jikespider<span class="token operator">|</span>symantecspider<span class="token operator">|</span>scannerlwebcrawler<span class="token operator">|</span>crawler<span class="token operator">|</span>    360spider<span class="token operator">|</span>sosospider<span class="token operator">|</span>sogou web sprider<span class="token operator">|</span>sogou orion spider<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="23-是否ios"><a href="#23-是否ios" class="headerlink" title="23.是否ios"></a>23.是否ios</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isIos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Linux'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//安卓手机</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//苹果手机</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//iPad</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Windows Phone'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//winphone手机</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="24-是否为PC端"><a href="#24-是否为PC端" class="headerlink" title="24.是否为PC端"></a>24.是否为PC端</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isPC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> userAgentInfo <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>    <span class="token keyword">var</span> Agents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Android"</span><span class="token punctuation">,</span> <span class="token string">"iPhone"</span><span class="token punctuation">,</span>        <span class="token string">"SymbianOS"</span><span class="token punctuation">,</span> <span class="token string">"Windows Phone"</span><span class="token punctuation">,</span>        <span class="token string">"iPad"</span><span class="token punctuation">,</span> <span class="token string">"iPod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> Agents<span class="token punctuation">.</span>length<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgentInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Agents<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="25-去除html标签"><a href="#25-去除html标签" class="headerlink" title="25.去除html标签"></a>25.去除html标签</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> removeHtmltag <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;[^>]+>/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="26-获取url参数"><a href="#26-获取url参数" class="headerlink" title="26.获取url参数"></a>26.获取url参数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> getQueryString <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> search <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="27-动态引入js"><a href="#27-动态引入js" class="headerlink" title="27.动态引入js"></a>27.动态引入js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> injectScript <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="28-根据url地址下载"><a href="#28-根据url地址下载" class="headerlink" title="28.根据url地址下载"></a>28.根据url地址下载</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> isChrome <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'chrome'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> isSafari <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'safari'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isChrome <span class="token operator">||</span> isSafari<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>link<span class="token punctuation">.</span>download <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> fileName <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            link<span class="token punctuation">.</span>download <span class="token operator">=</span> fileName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>createEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'MouseEvents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            link<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?download'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">'_self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="29-el是否包含某个class"><a href="#29-el是否包含某个class" class="headerlink" title="29.el是否包含某个class"></a>29.el是否包含某个class</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> hasClass <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|\\s)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'(\\s|$)'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="30-el添加某个class"><a href="#30-el添加某个class" class="headerlink" title="30.el添加某个class"></a>30.el添加某个class</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> addClass <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> newClass <span class="token operator">=</span> el<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    newClass<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>    el<span class="token punctuation">.</span>className <span class="token operator">=</span> newClass<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="31-el去除某个class"><a href="#31-el去除某个class" class="headerlink" title="31.el去除某个class"></a>31.el去除某个class</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> removeClass <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|\\s)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'(\\s|$)'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span>className <span class="token operator">=</span> el<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="32-获取滚动的坐标"><a href="#32-获取滚动的坐标" class="headerlink" title="32.获取滚动的坐标"></a>32.获取滚动的坐标</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> getScrollPosition <span class="token operator">=</span> <span class="token punctuation">(</span>el <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    x<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageXOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageYOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollTop<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="33-滚动到顶部"><a href="#33-滚动到顶部" class="headerlink" title="33.滚动到顶部"></a>33.滚动到顶部</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> scrollToTop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">-</span> c <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="34-el是否在视口范围内"><a href="#34-el是否在视口范围内" class="headerlink" title="34.el是否在视口范围内"></a>34.el是否在视口范围内</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> elementIsVisibleInViewport <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> partiallyVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> top<span class="token punctuation">,</span> left<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> right <span class="token punctuation">}</span> <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> innerHeight<span class="token punctuation">,</span> innerWidth <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>    <span class="token keyword">return</span> partiallyVisible        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> innerHeight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>bottom <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;</span> innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> innerWidth<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> innerWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> innerHeight <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> innerWidth<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="35-洗牌算法随机"><a href="#35-洗牌算法随机" class="headerlink" title="35.洗牌算法随机"></a>35.洗牌算法随机</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> shuffle <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        random<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">)</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="36-劫持粘贴板"><a href="#36-劫持粘贴板" class="headerlink" title="36.劫持粘贴板"></a>36.劫持粘贴板</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> copyTextToClipboard <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> textArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textArea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'transparent'</span><span class="token punctuation">;</span>    textArea<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>    textArea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> successful <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Oops, unable to copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="37-判断类型集合"><a href="#37-判断类型集合" class="headerlink" title="37.判断类型集合"></a>37.判断类型集合</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> checkStr <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'phone'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//手机号码</span>            <span class="token keyword">return</span> <span class="token regex">/^1[3|4|5|6|7|8|9][0-9]{9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'tel'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//座机</span>            <span class="token keyword">return</span> <span class="token regex">/^(0\d{2,3}-\d{7,8})(-\d{1,4})?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'card'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//身份证</span>            <span class="token keyword">return</span> <span class="token regex">/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'pwd'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span>            <span class="token keyword">return</span> <span class="token regex">/^[a-zA-Z]\w{5,17}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">'postal'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//邮政编码</span>            <span class="token keyword">return</span> <span class="token regex">/[1-9]\d{5}(?!\d)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'QQ'</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">//QQ号</span>            <span class="token keyword">return</span> <span class="token regex">/^[1-9][0-9]{4,9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'email'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//邮箱</span>            <span class="token keyword">return</span> <span class="token regex">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'money'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//金额(小数点2位)</span>            <span class="token keyword">return</span> <span class="token regex">/^\d*(?:\.\d{0,2})?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'URL'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">//网址</span>            <span class="token keyword">return</span> <span class="token regex">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">'IP'</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">//IP</span>            <span class="token keyword">return</span> <span class="token regex">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'date'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//日期时间</span>            <span class="token keyword">return</span> <span class="token regex">/^(\d{4})\-(\d{2})\-(\d{2}) (\d{2})(?:\:\d{2}|:(\d{2}):(\d{2}))$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex">/^(\d{4})\-(\d{2})\-(\d{2})$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">'number'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//数字</span>            <span class="token keyword">return</span> <span class="token regex">/^[0-9]$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'english'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//英文</span>            <span class="token keyword">return</span> <span class="token regex">/^[a-zA-Z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'chinese'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//中文</span>            <span class="token keyword">return</span> <span class="token regex">/^[\\u4E00-\\u9FA5]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'lower'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//小写</span>            <span class="token keyword">return</span> <span class="token regex">/^[a-z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'upper'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//大写</span>            <span class="token keyword">return</span> <span class="token regex">/^[A-Z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'HTML'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//HTML标记</span>            <span class="token keyword">return</span> <span class="token regex">/&lt;("[^"]*"|'[^']*'|[^'">])*>/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="38-严格的身份证校验"><a href="#38-严格的身份证校验" class="headerlink" title="38.严格的身份证校验"></a>38.严格的身份证校验</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isCardID <span class="token operator">=</span> <span class="token punctuation">(</span>sId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/(^\d{15}$)|(^\d{17}(\d|X|x)$)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你输入的身份证长度或格式错误'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//身份证城市</span>    <span class="token keyword">var</span> aCity <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token string">"天津"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token string">"河北"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token string">"山西"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token string">"内蒙古"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">:</span> <span class="token string">"辽宁"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">:</span> <span class="token string">"吉林"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token string">"黑龙江"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">"江苏"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">:</span> <span class="token string">"浙江"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">:</span> <span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">:</span> <span class="token string">"福建"</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">:</span> <span class="token string">"江西"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">:</span> <span class="token string">"山东"</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">:</span> <span class="token string">"河南"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">:</span> <span class="token string">"湖北"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">:</span> <span class="token string">"湖南"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">:</span> <span class="token string">"广东"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">:</span> <span class="token string">"广西"</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">:</span> <span class="token string">"海南"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">"重庆"</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">:</span> <span class="token string">"四川"</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">:</span> <span class="token string">"贵州"</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">:</span> <span class="token string">"云南"</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">:</span> <span class="token string">"西藏"</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">:</span> <span class="token string">"陕西"</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">:</span> <span class="token string">"甘肃"</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">:</span> <span class="token string">"青海"</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">:</span> <span class="token string">"宁夏"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">:</span> <span class="token string">"新疆"</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">:</span> <span class="token string">"台湾"</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">:</span> <span class="token string">"香港"</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">:</span> <span class="token string">"澳门"</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">:</span> <span class="token string">"国外"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>aCity<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的身份证地区非法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 出生日期验证</span>    <span class="token keyword">var</span> sBirthday <span class="token operator">=</span> <span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>sBirthday<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sBirthday <span class="token operator">!=</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'身份证上的出生日期非法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 身份证号码校验</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        codes <span class="token operator">=</span> <span class="token string">"10X98765432"</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sId<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> sId<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> last <span class="token operator">=</span> codes<span class="token punctuation">[</span>sum <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算出来的最后一位身份证号码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sId<span class="token punctuation">[</span>sId<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你输入的身份证号非法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h4 id="39-随机数范围"><a href="#39-随机数范围" class="headerlink" title="39.随机数范围"></a>39.随机数范围</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> random <span class="token operator">=</span> <span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="40-将阿拉伯数字翻译成中文的大写数字"><a href="#40-将阿拉伯数字翻译成中文的大写数字" class="headerlink" title="40.将阿拉伯数字翻译成中文的大写数字"></a>40.将阿拉伯数字翻译成中文的大写数字</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> numberToChinese <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> AA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"零"</span><span class="token punctuation">,</span> <span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">,</span> <span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token string">"五"</span><span class="token punctuation">,</span> <span class="token string">"六"</span><span class="token punctuation">,</span> <span class="token string">"七"</span><span class="token punctuation">,</span> <span class="token string">"八"</span><span class="token punctuation">,</span> <span class="token string">"九"</span><span class="token punctuation">,</span> <span class="token string">"十"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> BB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"十"</span><span class="token punctuation">,</span> <span class="token string">"百"</span><span class="token punctuation">,</span> <span class="token string">"仟"</span><span class="token punctuation">,</span> <span class="token string">"萬"</span><span class="token punctuation">,</span> <span class="token string">"億"</span><span class="token punctuation">,</span> <span class="token string">"点"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^0*)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        re <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                re <span class="token operator">=</span> BB<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"0{4}//d{"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}$"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    re <span class="token operator">=</span> BB<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>                re <span class="token operator">=</span> BB<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>                BB<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> BB<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            re <span class="token operator">=</span> AA<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            re <span class="token operator">=</span> AA<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> BB<span class="token punctuation">[</span>k <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 加上小数部分(如果有小数部分)</span>    <span class="token punctuation">{</span>        re <span class="token operator">+</span><span class="token operator">=</span> BB<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            re <span class="token operator">+</span><span class="token operator">=</span> AA<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">==</span> <span class="token string">'一十'</span><span class="token punctuation">)</span>        re <span class="token operator">=</span> <span class="token string">"十"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^一/</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> re<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        re <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="41-将数字转换为大写金额"><a href="#41-将数字转换为大写金额" class="headerlink" title="41.将数字转换为大写金额"></a>41.将数字转换为大写金额</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> changeToChinese <span class="token operator">=</span> <span class="token punctuation">(</span>Num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断如果传递进来的不是字符的话转换为字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Num <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//替换tomoney()中的“,”</span>    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ /g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//替换tomoney()中的空格</span>    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/￥/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//替换掉可能出现的￥字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//验证输入的字符是否为数字</span>        <span class="token comment" spellcheck="true">//alert("请检查小写金额是否正确");</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符处理完毕后开始转换，采用前后两部分分别转换</span>    <span class="token keyword">var</span> part <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newchar <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小数点前进行转化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若数量超过拾亿单位，提示</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> tmpnewchar <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> perchar <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>perchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"零"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"壹"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"贰"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"叁"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"肆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"伍"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"6"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"陆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"7"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"柒"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"8"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"捌"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"9"</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> <span class="token string">"玖"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"佰"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"仟"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"万"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"佰"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"仟"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"亿"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> newchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> newchar<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//小数点之后进行转化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// alert("小数点之后只能保留两位,系统将自动截断");</span>            part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpnewchar <span class="token operator">=</span> <span class="token string">""</span>            perchar <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>perchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"零"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"壹"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"贰"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"叁"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"肆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"伍"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"6"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"陆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"7"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"柒"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"8"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"捌"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"9"</span><span class="token punctuation">:</span>                    tmpnewchar <span class="token operator">=</span> <span class="token string">"玖"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"角"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"分"</span><span class="token punctuation">;</span>            newchar <span class="token operator">=</span> newchar <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//替换所有无用汉字</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>newchar<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"零零"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零零"</span><span class="token punctuation">,</span> <span class="token string">"零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零亿"</span><span class="token punctuation">,</span> <span class="token string">"亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"亿万"</span><span class="token punctuation">,</span> <span class="token string">"亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零万"</span><span class="token punctuation">,</span> <span class="token string">"万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零元"</span><span class="token punctuation">,</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零角"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零分"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newchar<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>newchar<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"元"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newchar <span class="token operator">=</span> newchar <span class="token operator">+</span> <span class="token string">"整"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newchar<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="42-判断一个元素是否在数组中"><a href="#42-判断一个元素是否在数组中" class="headerlink" title="42.判断一个元素是否在数组中"></a>42.判断一个元素是否在数组中</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> contains <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="43-数组排序，-type-1：从小到大-2：从大到小-3：随机"><a href="#43-数组排序，-type-1：从小到大-2：从大到小-3：随机" class="headerlink" title="43.数组排序，{type} 1：从小到大 2：从大到小 3：随机"></a>43.数组排序，{type} 1：从小到大 2：从大到小 3：随机</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> sort <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="44-去重"><a href="#44-去重" class="headerlink" title="44.去重"></a>44.去重</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> unique <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'from'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="45-求两个集合的并集"><a href="#45-求两个集合的并集" class="headerlink" title="45.求两个集合的并集"></a>45.求两个集合的并集</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> union <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="46-求两个集合的交集"><a href="#46-求两个集合的交集" class="headerlink" title="46.求两个集合的交集"></a>46.求两个集合的交集</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> intersect <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token operator">?</span> o <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="47-删除其中一个元素"><a href="#47-删除其中一个元素" class="headerlink" title="47.删除其中一个元素"></a>47.删除其中一个元素</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> remove <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="48-将类数组转换为数组"><a href="#48-将类数组转换为数组" class="headerlink" title="48.将类数组转换为数组"></a>48.将类数组转换为数组</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> formArray <span class="token operator">=</span> <span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> ary<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="49-最大值"><a href="#49-最大值" class="headerlink" title="49.最大值"></a>49.最大值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="50-最小值"><a href="#50-最小值" class="headerlink" title="50.最小值"></a>50.最小值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="51-求和"><a href="#51-求和" class="headerlink" title="51.求和"></a>51.求和</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre <span class="token operator">+</span> cur    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="52-平均值"><a href="#52-平均值" class="headerlink" title="52.平均值"></a>52.平均值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> average <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">}</span></code></pre><h4 id="53-去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格"><a href="#53-去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格" class="headerlink" title="53.去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格"></a>53.去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> trim <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token number">1</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s*)|(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s*)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="54-字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写"><a href="#54-字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写" class="headerlink" title="54.字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写"></a>54.字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> changeCase <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token number">4</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\b\w+\b/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\b\w+\b/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[a-z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="55-检测密码强度"><a href="#55-检测密码强度" class="headerlink" title="55.检测密码强度"></a>55.检测密码强度</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> checkPwd <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> Lv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Lv    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[0-9]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lv<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[a-z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lv<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[A-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lv<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[\.|-|_]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Lv<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Lv<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="56-函数节流器"><a href="#56-函数节流器" class="headerlink" title="56.函数节流器"></a>56.函数节流器</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> debouncer <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> time<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>debounceTimestamp <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>debounceTimestamp <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="57-在字符串中插入新字符串"><a href="#57-在字符串中插入新字符串" class="headerlink" title="57.在字符串中插入新字符串"></a>57.在字符串中插入新字符串</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> insertStr <span class="token operator">=</span> <span class="token punctuation">(</span>soure<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newStr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> soure<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> newStr <span class="token operator">+</span> soure<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="58-判断两个对象是否键值相同"><a href="#58-判断两个对象是否键值相同" class="headerlink" title="58.判断两个对象是否键值相同"></a>58.判断两个对象是否键值相同</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isObjectEqual <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> aProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> bProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aProps<span class="token punctuation">.</span>length <span class="token operator">!==</span> bProps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aProps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> propName <span class="token operator">=</span> aProps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">!==</span> b<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="59-16进制颜色转RGBRGBA字符串"><a href="#59-16进制颜色转RGBRGBA字符串" class="headerlink" title="59.16进制颜色转RGBRGBA字符串"></a>59.16进制颜色转RGBRGBA字符串</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> colorToRGB <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> opa<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/^(#?)[a-fA-F0-9]{6}$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//16进制颜色值校验规则</span>    <span class="token keyword">var</span> isOpa <span class="token operator">=</span> <span class="token keyword">typeof</span> opa <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断是否有设置不透明度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果值不符合规则返回空字符</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> v <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/#/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果有#号先去除#号</span>    <span class="token keyword">var</span> rgbArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rgbStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> item <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rgbArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rgbStr <span class="token operator">=</span> rgbArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rgbStr <span class="token operator">=</span> <span class="token string">'rgb'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isOpa <span class="token operator">?</span> <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> rgbStr <span class="token operator">+</span> <span class="token punctuation">(</span>isOpa <span class="token operator">?</span> <span class="token string">','</span> <span class="token operator">+</span> opa <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rgbStr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="60-追加url参数"><a href="#60-追加url参数" class="headerlink" title="60.追加url参数"></a>60.追加url参数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> appendQuery <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> options <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> options    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> options    <span class="token punctuation">}</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo一键部署到阿里oss</title>
      <link href="/2020/052740970.html"/>
      <url>/2020/052740970.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、脚本部署"><a href="#一、脚本部署" class="headerlink" title="一、脚本部署"></a>一、脚本部署</h2><p>安装依赖 ： <code>npm i ali-oss</code></p><p>新建该脚本<code>（oss.js）</code>放在你hexo项目的根目录下，和<code>public</code>同级</p><p>该脚本有四个参数需要自己的配置(在你的oss控制台查)：<code>access key</code>，<code>access</code> <code>secret</code>，<code>region</code>，<code>Bucket</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ali-oss'</span><span class="token punctuation">)</span><span class="token keyword">const</span> promisifyReaddir <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readdir<span class="token punctuation">)</span><span class="token keyword">const</span> promisifyStat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 阿里 OSS access key 拥有对 OSS 的全部权限</span><span class="token keyword">const</span> ALIOSSKEY <span class="token operator">=</span> <span class="token punctuation">{</span>    key<span class="token punctuation">:</span> <span class="token string">'*****************'</span><span class="token punctuation">,</span>    secret<span class="token punctuation">:</span> <span class="token string">'*****************'</span><span class="token punctuation">}</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请填写你的 Bucket 对应的 region</span>    region<span class="token punctuation">:</span> <span class="token string">'oss-cn-shanghai'</span><span class="token punctuation">,</span>    accessKeyId<span class="token punctuation">:</span> ALIOSSKEY<span class="token punctuation">.</span>key<span class="token punctuation">,</span>    accessKeySecret<span class="token punctuation">:</span> ALIOSSKEY<span class="token punctuation">.</span>secret<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请填写对应的 Bucket 名字</span>    bucket<span class="token punctuation">:</span> <span class="token string">'MewBucket'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> publicPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>proPath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dir <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promisifyReaddir</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dir<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promisifyStat</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> fileStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传文件: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">putStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> fileStream<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>proPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后修改根目录下的package.json文件<br>找到”scripts”: { ··· }这一行<br>增加一个指令：”oss”: “node ./oss.js” ,就像下面这样</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"doss"</span><span class="token operator">:</span> <span class="token string">"node ./oss.js"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>然后直接运行 <code>node oss</code> 就能直接把<code>public</code>下所有文件上传到你的<code>bucket</code>啦</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件 路由动态</title>
      <link href="/2020/051540520.html"/>
      <url>/2020/051540520.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-「全局组件注册」"><a href="#1-「全局组件注册」" class="headerlink" title="1 -「全局组件注册」"></a>1 -「全局组件注册」</h3><p>组件是我们非常常用的东西，很多人使用组件都是通过一个一个文件去引用和注册。如果一个组件在整个项目里面的使用次数较多，每一次使用都需要引用并注册，就会显得特别麻烦</p><ul><li><p>一般组件应用弊端</p></li><li><p>傻瓜式，太笨拙</p></li><li><p>繁琐，低效</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>I am HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> Child1 <span class="token keyword">from</span> <span class="token string">'./child1.vue'</span>   <span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>components<span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 注册</span>  Child1<span class="token punctuation">}</span><span class="token punctuation">,</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  msg<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li></ul><p>当我们在项目需要重复多次使用该组件，会导致出现很多重复的引入和注册代码，既繁琐又不雅观。因此我们可以通过一个全局的Js文件来管理，将需要多次使用的组件进行全局注册</p><h5 id="创建全局-js文件管理全局组件"><a href="#创建全局-js文件管理全局组件" class="headerlink" title="创建全局.js文件管理全局组件"></a>创建全局.js文件管理全局组件</h5><p><img src="/medias/loading.gif" data-original="../img/158944481.png" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1 - globalComponent.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token comment" spellcheck="true">// 引入vue</span><span class="token comment" spellcheck="true">// 处理首字母大写 abc => Abc</span><span class="token keyword">function</span> <span class="token function">changeStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    require.context(arg1,arg2,arg3)        arg1 - 读取文件的路径        arg2 - 是否遍历文件的子目录        arg3 - 匹配文件的正则    关于这个Api的用法，建议小伙伴们去查阅一下，用途也比较广泛*/</span><span class="token keyword">const</span> requireComponent <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'requireComponent.keys():'</span><span class="token punctuation">,</span>requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 打印</span>requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">requireComponent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'config:'</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 打印</span>    <span class="token keyword">const</span> componentName <span class="token operator">=</span> <span class="token function">changeStr</span><span class="token punctuation">(</span>        fileName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\.\//</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\.\w+$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// ./child1.vue => child1</span>    <span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>componentName<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">||</span> config<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 动态注册该目录下的所有.vue文件</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 2 - 将globalComponent.js引入main.js</span>    <span class="token keyword">import</span> global <span class="token keyword">from</span> <span class="token string">'./components/globalComponent'</span></code></pre><pre class=" language-html"><code class="language-html">// 3 - 使用这类组件不再需要引入和注册，直接标签使用即可<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>I am HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="路由分区以及动态添加路由"><a href="#路由分区以及动态添加路由" class="headerlink" title="路由分区以及动态添加路由"></a>路由分区以及动态添加路由</h3><p>假设我们有很多路由，每一个路由都通过傻瓜式的引入方式，会导致整个项目代码量增多，繁琐，更重要的一点是增加后期维护的难度。因此我们也可以通过上面类似的方式，对路由的引入和使用进行管理，实现分区引入路由，将不同功能下的路由进行区分，通过动态的方式进行引入，即方便快捷又增加可维护</p><h4 id="创建专门的路由-js文件管理所有的路由"><a href="#创建专门的路由-js文件管理所有的路由" class="headerlink" title="创建专门的路由.js文件管理所有的路由"></a>创建专门的路由.js文件管理所有的路由</h4><pre class=" language-js"><code class="language-js">总路由管理文件 <span class="token operator">-</span> index<span class="token punctuation">.</span>js分区路由    <span class="token operator">-</span> index<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>js    <span class="token operator">-</span> login<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>js</code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/upload/img/20200520161953.png" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 分区路由文件写法</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/index'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'Index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 懒加载式引入，当跳转到时才进行引入chunk</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 总路由管理文件 index.js 写法</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routerList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 路由数组 - 存放所有路由</span><span class="token keyword">function</span> <span class="token function">importAll</span><span class="token punctuation">(</span>routerArr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该函数用于将所有分区路由中的路由添加到路由数组</span>    routerArr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        routerList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">routerArr</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token regex">/\.routes\.js/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>routerList<span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript常用API</title>
      <link href="/2020/05147550.html"/>
      <url>/2020/05147550.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS-数组常用API方法和遍历方法总结"><a href="#JS-数组常用API方法和遍历方法总结" class="headerlink" title="JS 数组常用API方法和遍历方法总结"></a>JS 数组常用API方法和遍历方法总结</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><h5 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 (array)"></a>数组 (array)</h5><p>map：遍历数组，返回回调返回值组成的新数组，不改变原数组，不会对空数组进行检测</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> xxx<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>forEach：无法break，可以用try/catch中throw new Error来停止，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>filter：过滤，返回过滤后的数组，不改变原数组，不会对空数组进行检测</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [9, 5]</span></code></pre><p>some：有一项返回true，则整体为true，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>every ：需要全部符合条件才返回true，有一项返回false，则整体为false，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>join：返回通过指定连接符str把数组连接成字符串，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>push / pop ：数组末尾推入push和弹出pop，返回改变后数组的长度/弹出项，改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> ／ Array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>unshift / shift：数组头部推入unshift和弹出shift，返回改变后数组的长度/弹出项，改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> ／ Array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>sort(fn) / reverse：按规则排序与反转，改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>splice：返回删除元素组成的数组，从start处开始删除number个值后插入valueN参数列表到数组中，改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> number<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2<span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>concat：连接n（n &gt;= 2）个数组，返回数组连接后的数组副本，浅拷贝，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span></code></pre><p>slice：返回截断后的新数组，不改变原数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span></code></pre><p>indexOf / lastIndexOf(value, fromIndex)<br>indexOf 从fromIndex（默认为0）开始向后查找value<br>lastIndexOf 从fromIndex（默认为-1）开始向前查找value<br>返回value对应的下标</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>isArray * ：用于确定参数value是否是一个Array</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><p>find *：返回符合条件的第一个数组元素item</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> item <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>find<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>findIndex *：返回符合条件的第一个数组元素的索引</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> index <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>find<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><p>from *：将类似数组的对象和可遍历（iterable）的对象转为真正的数组</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span></code></pre><p>数组</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// [0, 'a'] [1, 'b'] [2, 'c']</span>Set    <span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> arr1<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ['a', 'a'] ['b', 'b'] ['c', 'c']</span>Map    <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr2<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr2<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> arr2<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ['a', 'a'] ['b', 'b']</span></code></pre><p>keys *：返回迭代器：返回键key（即上面的每个数组中的第一个值）</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>values：返回迭代器：返回值value（即上面的每个数组中的第二个值）</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>includes *：用于从fromIndex判断数组中是否包含val，可替代ES5中的 indexOf</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx部署项目</title>
      <link href="/2020/051418076.html"/>
      <url>/2020/051418076.html</url>
      
        <content type="html"><![CDATA[<h2 id="window-or-linux-Nginx部署项目"><a href="#window-or-linux-Nginx部署项目" class="headerlink" title="window or linux   Nginx部署项目"></a>window or linux   Nginx部署项目</h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>一、下载<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx</a>,下载好解压至桌面，或者D盘，C盘实际看自己喜好<br><img src="/medias/loading.gif" data-original="../img/1589424481.png" alt=""></p><p>下载双击就可以看到站点搭建好了<br><img src="/medias/loading.gif" data-original="../img/1589426261.png" alt=""></p><p>二、部署  在<code>\nginx-1.18.0\html\</code>目录下新建项目文件夹<code>xiaohong</code>,注：我这里取名xiaohong 也可以去其他名字<br><img src="/medias/loading.gif" data-original="../img/1589426782.png" alt=""></p><p>打开<code>xiaohong</code>这个文件夹把前端打包好的文件（dist）全部放到此目录下<br><img src="/medias/loading.gif" data-original="../img/1589427034.png" alt=""></p><p>三、配置<code>\nginx-1.18.0\conf\目录下的nginx.conf ，location / 下root</code>修改为 <code>html/xiaohong</code>重启就可以访问了</p><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><pre class=" language-conf"><code class="language-conf">nginx.conf配置文件            #user  nobody;            worker_processes  1;            #error_log  logs/error.log;            #error_log  logs/error.log  notice;            #error_log  logs/error.log  info;            #pid        logs/nginx.pid;            events {                worker_connections  1024;            }            http {                include       mime.types;                default_type  application/octet-stream;                #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                #                  '$status $body_bytes_sent "$http_referer" '                #                  '"$http_user_agent" "$http_x_forwarded_for"';                #access_log  logs/access.log  main;                sendfile        on;                #tcp_nopush     on;                #keepalive_timeout  0;                keepalive_timeout  65;                server {                    listen       80;                    server_name  localhost;                    location / {                        root   html/xiaohong;   #文件目录                        autoindex on;                         index  index.html index.htm;                    }                    #error_page  404              /404.html;                    error_page   500 502 503 504  /50x.html;                    location = /50x.html {                        root   html;                    }                }            }</code></pre><p>地址栏：<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br><img src="/medias/loading.gif" data-original="../img/1589427689.png" alt=""></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>一、下载安装 Nginx</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.17.10.tar.gz</code></pre><p>解压</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf nginx-1.14.0.tar.gz</code></pre><p>进入安装包目录：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> nginx-1.14.0</code></pre><p>编译安装：</p><pre class=" language-bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/usr/local/share/applications/nginx-1.14.0/ --with-http_ssl_module<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>如果此处 报 cannot open object file 需做个路径映射</p><pre class=" language-bash"><code class="language-bash">    <span class="token function">ln</span> -s nginx /usr/nginx</code></pre><p>先查看安装路径然后启动 启动Ngnix ,每个服务器安装位置可能有差异安装自行查看</p><pre class=" language-bash"><code class="language-bash"><span class="token function">whereis</span> nginx <span class="token comment" spellcheck="true">#查看安装路径</span>/usr/local/nginx-1.14.0/sbin/nginx -t <span class="token comment" spellcheck="true">#验证nginx配置文件</span>nginx /usr/local/nginx-1.14.0/sbin/nginx <span class="token comment" spellcheck="true">#启动</span>/usr/local/nginx-1.14.0/sbin/nginx -s stop <span class="token comment" spellcheck="true">#关闭</span>/usr/local/nginx-1.14.0/sbin/nginx -s reload  <span class="token comment" spellcheck="true">#重启</span></code></pre><p><strong>注: nginx.conf 文件配置和window一致！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 网站部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs code 前端插件</title>
      <link href="/2020/05113800.html"/>
      <url>/2020/05113800.html</url>
      
        <content type="html"><![CDATA[<h3 id="Document-This"><a href="#Document-This" class="headerlink" title="Document This"></a>Document This</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102222.png" alt="js代码规范注释"></p><h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102254.png" alt="给括号加上不同的颜色，便于区分不同的区块，使用者可以定义不同括号类型和不同颜色"></p><!-- ### Beautify![格式化代码，值得注意的是，beautify插件支持自定义格式化代码规则](http://www.tenwang.com/ueditor/php/upload/image/20190615/1560608441248568.png) --><h3 id="HTML-Snippets"><a href="#HTML-Snippets" class="headerlink" title="HTML Snippets"></a>HTML Snippets</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102323.png" alt="超级实用且初级的 H5代码片段以及提示"></p><!-- 动图 --><h3 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102515.gif" alt="自动添加HTML / XML关闭标签（必备）"></p><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102613.gif" alt="VisualStudio代码插件，自动完成文件名"></p><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/dhjgood/PictureBed/img/20200520102655.gif" alt="自动重命名配对的HTML / XML标签(必备)"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识</title>
      <link href="/2020/05105171.html"/>
      <url>/2020/05105171.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-vue的虚拟dom？"><a href="#1-vue的虚拟dom？" class="headerlink" title="1.vue的虚拟dom？"></a>1.vue的虚拟dom？</h4><p>虚拟的DOM的核心思想是：对复杂的文档<code>DOM</code>结构，提供一种方便的工具，进行最小化地<code>DOM</code>操作。</p><h4 id="2-如何理解vue中MVVM模式？"><a href="#2-如何理解vue中MVVM模式？" class="headerlink" title="2.如何理解vue中MVVM模式？"></a>2.如何理解vue中MVVM模式？</h4><p><code>MVVM</code>全称是<code>Model-View-ViewModel</code>；vue是以数据为驱动的，一旦创建dom和数据就保持同步，<br>每当数据发生变化时，dom也会变化。<code>DOMListeners</code>和<code>DataBindings</code>是实现双向绑定的关键。<br><code>DOMListeners</code>监听页面所有<code>View</code>层<code>DOM</code>元素的变化，当发生变化，<code>Model</code>层的数据随之变化；<br><code>DataBindings</code>监听<code>Model</code>层的数据，当数据发生变化，<code>View</code>层的<code>DOM</code>元素随之变化。</p><h4 id="3-vue中-lt-keep-alive-gt-的作用？"><a href="#3-vue中-lt-keep-alive-gt-的作用？" class="headerlink" title="3.vue中&lt;keep-alive&gt;的作用？"></a>3.vue中<code>&lt;keep-alive&gt;</code>的作用？</h4><p>把切换出去的组件保留在缓存中，可以保留组件的状态或者避免重新渲染。</p><h4 id="4-vue生命周期的理解？"><a href="#4-vue生命周期的理解？" class="headerlink" title="4.vue生命周期的理解？"></a>4.vue生命周期的理解？</h4><p><code>beforeCreate</code>是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。</p><p><code>created</code>在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</p><p><code>beforeMount</code>发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</p><p><code>mounted</code>在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p><p><code>beforeUpdate</code>发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><p><code>updated</code>发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><p><code>beforeDestroy</code>发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p><p><code>destroyed</code>发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p><h4 id="5-组件之间的传值通信？"><a href="#5-组件之间的传值通信？" class="headerlink" title="5.组件之间的传值通信？"></a>5.组件之间的传值通信？</h4><p>父组件向子组件传值：<br>1、子组件在<code>props</code>中创建一个属性，用来接收父组件传过来的值；<br>2、在父组件中注册子组件；<br>3、在子组件标签中添加子组件props中创建的属性；<br>4、把需要传给子组件的值赋给该属性<br>子组件向父组件传值：<br>1、子组件中需要以某种方式（如点击事件）的方法来触发一个自定义的事件；<br>2、将需要传的值作为<code>$emit</code>的第二个参数，该值将作为实参传给响应事件的方法；<br>3、在父组件中注册子组件并在子组件标签上绑定自定义事件的监听。</p><h4 id="6-vue的优点是什么？"><a href="#6-vue的优点是什么？" class="headerlink" title="6.vue的优点是什么？"></a>6.vue的优点是什么？</h4><p>低耦合：视图（<code>View</code>）可以独立于Model变化和修改，一个<code>ViewModel</code>可以绑定到不同的”<code>View</code>“上，当<code>View</code>变化的时候<code>Model</code>可以不变，当<code>Model</code>变化的时候<code>View</code>也可以不变。<br>可重用性：你可以把一些视图逻辑放在一个<code>ViewMode</code>l里面，让很多<code>view</code>重用这段视图逻辑。<br>独立开发：开发人员可以专注于业务逻辑和数据的开发（<code>ViewModel</code>），设计人员可以专注于页面设计。<br>可测试：界面素来是比较难于测试的，而现在测试可以针对<code>ViewModel</code>来写。</p><h4 id="7-v-show和v-if指令的共同点和不同点"><a href="#7-v-show和v-if指令的共同点和不同点" class="headerlink" title="7.v-show和v-if指令的共同点和不同点"></a>7.v-show和v-if指令的共同点和不同点</h4><p><code>v-show</code>指令是通过修改元素的<code>display</code>的<code>CSS</code>属性让其显示或者隐藏<br><code>v-if</code>指令是直接销毁和重建<code>DOM</code>达到让元素显示和隐藏的效果</p><h4 id="8-如何让CSS只在当前组件中起作用"><a href="#8-如何让CSS只在当前组件中起作用" class="headerlink" title="8.如何让CSS只在当前组件中起作用"></a>8.如何让CSS只在当前组件中起作用</h4><p>将当前组件的 <code>&lt;style&gt;修改为&lt;style scoped&gt;</code></p><h4 id="9-lt-keep-alive-gt-lt-keep-alive-gt-的作用是什么"><a href="#9-lt-keep-alive-gt-lt-keep-alive-gt-的作用是什么" class="headerlink" title="9.&lt;keep-alive&gt;&lt;/keep-alive&gt;的作用是什么?"></a>9.<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>的作用是什么?</h4><p><code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code><br>包裹动态组件时，会缓存不活动的组件实例，主要用于保留组件状态或避免重新渲染。</p><h4 id="10-指令v-el的作用是什么"><a href="#10-指令v-el的作用是什么" class="headerlink" title="10.指令v-el的作用是什么?"></a>10.指令v-el的作用是什么?</h4><p>提供一个在页面上已存在的 <code>DOM</code> 元素作为 <code>Vue</code> 实例的挂载目标.可以是 <code>CSS</code> 选择器，也可以是一个 <code>HTMLElement</code> 实例</p><h4 id="11-在Vue中使用插件的步骤"><a href="#11-在Vue中使用插件的步骤" class="headerlink" title="11.在Vue中使用插件的步骤"></a>11.在Vue中使用插件的步骤</h4><p>采用<code>ES6</code>的<code>import ... from ...</code>语法或<code>CommonJSd的require()</code>方法引入插件<br>使用全局方法<code>Vue.use( plugin )</code>使用插件,可以传入一个选项对象<code>Vue.use(MyPlugin, { someOption: true })</code></p><h4 id="12-active-class是哪个组件的属性？"><a href="#12-active-class是哪个组件的属性？" class="headerlink" title="12.active-class是哪个组件的属性？"></a>12.active-class是哪个组件的属性？</h4><p><code>vue-router</code>模块的<code>router-link</code>组件。</p><h4 id="13-怎么定义vue-router的动态路由以及如何获取传过来的动态参数？"><a href="#13-怎么定义vue-router的动态路由以及如何获取传过来的动态参数？" class="headerlink" title="13.怎么定义vue-router的动态路由以及如何获取传过来的动态参数？"></a>13.怎么定义vue-router的动态路由以及如何获取传过来的动态参数？</h4><p>在<code>router</code>目录下的<code>index.js</code>文件中，对<code>path</code>属性加上<code>/:id</code><br>使用<code>router</code>对象的<code>params.id</code></p><h4 id="14-vue-router有哪几种导航钩子？"><a href="#14-vue-router有哪几种导航钩子？" class="headerlink" title="14.vue-router有哪几种导航钩子？"></a>14.vue-router有哪几种导航钩子？</h4><p>第一种：一种是全局导航钩子：<code>router.beforeEach(to,from,next)</code>，作用：跳转前进行判断拦截。<br>第二种：组件内的钩子；<br>第三种：单独路由独享组件</p><h4 id="15-为什么避免-v-if-和-v-for-用在一起"><a href="#15-为什么避免-v-if-和-v-for-用在一起" class="headerlink" title="15.为什么避免 v-if 和 v-for 用在一起"></a>15.为什么避免 v-if 和 v-for 用在一起</h4><p>当 Vue 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级，通过<code>v-if</code> 移动到容器元素，不会再重复遍历列表中的每个值。取而代之的是，我们只检查它一次，且不会在 <code>v-if</code> 为否的时候运算 <code>v-for</code></p><h4 id="16-VNode是什么？虚拟-DOM是什么？"><a href="#16-VNode是什么？虚拟-DOM是什么？" class="headerlink" title="16.VNode是什么？虚拟 DOM是什么？"></a>16.VNode是什么？虚拟 DOM是什么？</h4><p>Vue在 页面上渲染的节点，及其子节点称为“虚拟节点 (<code>Virtual Node</code>)”，简写为“VNode”。“虚拟 DOM”是由 Vue 组件树建立起来的整个 <code>VNode</code> 树的称呼。</p><h4 id="17-为什么使用key？"><a href="#17-为什么使用key？" class="headerlink" title="17.为什么使用key？"></a>17.为什么使用key？</h4><p>当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。</p><h4 id="18-vue-loader是什么？使用它的用途有哪些？"><a href="#18-vue-loader是什么？使用它的用途有哪些？" class="headerlink" title="18.vue-loader是什么？使用它的用途有哪些？"></a>18.vue-loader是什么？使用它的用途有哪些？</h4><p><code>vue-loader</code>是解析.vue文件的一个加载器。<br>用途：<code>j</code>s可以写<code>es6、styl</code>e样式可以<code>scss或less、template</code>可以加<code>jade</code>等</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器环境搭建ftp</title>
      <link href="/2020/050942639.html"/>
      <url>/2020/050942639.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建-linux-服务器环境搭建ftp"><a href="#搭建-linux-服务器环境搭建ftp" class="headerlink" title="搭建 linux 服务器环境搭建ftp"></a>搭建 linux 服务器环境搭建ftp</h2><h4 id="登陆远程-linux-服务器"><a href="#登陆远程-linux-服务器" class="headerlink" title="登陆远程 linux 服务器"></a>登陆远程 linux 服务器</h4><p> <code>ssh root@ip地址</code></p><h4 id="使用yum安装vsftpd"><a href="#使用yum安装vsftpd" class="headerlink" title="使用yum安装vsftpd"></a>使用yum安装vsftpd</h4><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> -y vsftpd</code></pre><h4 id="安装后-启动FTP服务："><a href="#安装后-启动FTP服务：" class="headerlink" title="安装后,启动FTP服务："></a>安装后,启动FTP服务：</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> vsftpd start</code></pre><h4 id="启动后-查看系统监听的端口："><a href="#启动后-查看系统监听的端口：" class="headerlink" title="启动后,查看系统监听的端口："></a>启动后,查看系统监听的端口：</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">netstat</span> -nltp <span class="token operator">|</span> <span class="token function">grep</span> 21</code></pre><h4 id="配置ftp权限-编辑-etc-vsftpd-vsftpd-conf-找到下面两处位置并修改："><a href="#配置ftp权限-编辑-etc-vsftpd-vsftpd-conf-找到下面两处位置并修改：" class="headerlink" title="配置ftp权限, 编辑 /etc/vsftpd/vsftpd.conf, 找到下面两处位置并修改："></a>配置ftp权限, 编辑 <code>/etc/vsftpd/vsftpd.conf</code>, 找到下面两处位置并修改：</h4><p>作用：<br>禁用匿名用户 12 <code>YES</code> 改为 <code>NO</code><br>禁止切换目录 101 行 删除 <strong>#</strong></p><p><code>anonymous_enable=NO</code><br><code>chroot_local_user=YES</code></p><h4 id="重启ftp服务"><a href="#重启ftp服务" class="headerlink" title="重启ftp服务"></a>重启ftp服务</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> vsftpd restart 创建ftp 用户 <span class="token variable"><span class="token variable">`</span>web <span class="token variable">`</span></span>, 为web用户创建密码<span class="token variable"><span class="token variable">`</span>123456<span class="token variable">`</span></span>$ <span class="token function">useradd</span> web$ <span class="token keyword">echo</span> <span class="token string">"123456"</span> <span class="token operator">|</span> <span class="token function">passwd</span> --stdin<span class="token comment" spellcheck="true">#### 限制用户仅能通过 FTP 访问</span>限制用户 ftpuser只能通过 FTP 访问服务器，而不能直接登录服务器：$ <span class="token function">usermod</span> -s /sbin/nologin web</code></pre><h4 id="为用户分配主目录"><a href="#为用户分配主目录" class="headerlink" title="为用户分配主目录"></a>为用户分配主目录</h4><p><code>/data/ftp</code> 为主目录, 该目录不可上传文件<br><code>/data/ftp/pub</code> 文件只能上传到该目录下</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p /data/ftp/pub</code></pre><p>设置访问权限</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> a-w /data/ftp <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> 777 -R /data/ftp/pub</code></pre><h4 id="设置为用户的主目录："><a href="#设置为用户的主目录：" class="headerlink" title="设置为用户的主目录："></a>设置为用户的主目录：</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">usermod</span> -d /data/ftp web</code></pre><h4 id="开放ftp-21端口-或者-关闭防火墙"><a href="#开放ftp-21端口-或者-关闭防火墙" class="headerlink" title="开放ftp 21端口 或者 关闭防火墙"></a>开放<code>ftp 21</code>端口 或者 关闭防火墙</h4><p>关闭<code>SELinux</code>服务<br><code>setenforce 0</code><br>关闭防火墙<br><code>iptables -F</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建博客</title>
      <link href="/2020/050759243.html"/>
      <url>/2020/050759243.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>0.注册/登录一个GitHub账户，建立一个公开的仓库并且仓库名一定要是：<code>用户名.github.io</code></p><p>1.下载node并配置好环境变量（我的第一个坑就是node没有配置环境变量）安装直接一直下一步即可</p><p>2.下载git配置好环境变量（如果不太了解可以看一下廖雪峰的教程）</p><h2 id="二、搭建过程"><a href="#二、搭建过程" class="headerlink" title="二、搭建过程"></a>二、搭建过程</h2><h2 id="为git配置信息"><a href="#为git配置信息" class="headerlink" title="为git配置信息"></a>为git配置信息</h2><p><code>window+r</code>打开<code>cmd</code>打开终端配置git信息输入如下信息：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config -g user.name <span class="token string">"你的github用户名"</span>$ <span class="token function">git</span> config -g user.emil <span class="token string">"你注册github的邮箱"</span></code></pre><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>在终端输入如下命令：</p><p><code>ssh -keygen -t rda -C &quot;你注册github的邮箱&quot;</code><br>之后不管内容三个回车即可</p><h2 id="复制密钥并且粘贴到github"><a href="#复制密钥并且粘贴到github" class="headerlink" title="复制密钥并且粘贴到github"></a>复制密钥并且粘贴到github</h2><p>上面的密钥会生成到c盘的用户文件夹里面，如果找不到就在c盘搜索i<code>d_rsa.hub</code>，然后打开把里面的内容都复制下来，登录到你的github点击右上角你头像，会出现一个下拉菜单找到<code>setting</code>，选择<code>SSH and GPG keys</code>,点击<code>new ssh key</code>，然后只需要把你复制的密钥粘贴上去即可，名字随意取。</p><p>此时可以来测试一下你的密钥是否配置成功 输入如下命令：</p><p><code>ssh -T git@github.com</code><br>选择yes，如果看到…successfull..那就是成功了</p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>hexo是一个集成的博客框架，可以快速根据主题生成静态网页</p><p>此时我们可以选择盘符新建一个空文件夹名为为blog，鼠标右键选择<code>git bach here</code> 安装hexo在里面执行如下语句：</p><pre><code>$ npm i -g hexo-cil</code></pre><p>这里时间可能会久一点，因为是在外网下载，如果时间太久或者下载失败的话可以用淘宝的镜像下载 如下</p><pre><code>$ npm i -g cnpm --registry=https:registry.npm.taobao.org$ cnpm i -g hexo-cil$ cnpm i hexo --save</code></pre><p>如果下载安装好了可以用hexo -v来查看如果看到版本信息就算安装成功如hexo-cil:4.1.0</p><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><pre><code>$ hexo init</code></pre><p>然后进入blog文件夹 如果你看到有source themes和_config.yml等文件夹就说明你操作成功</p><h2 id="在本地服务器上查看"><a href="#在本地服务器上查看" class="headerlink" title="在本地服务器上查看"></a>在本地服务器上查看</h2><pre><code>$ hexo s</code></pre><p>接着打开浏览去器输入<code>locahost:4000</code>，就可以查看了，实际上这时候你的博客已经搭建成功了</p><p>嗯快一定的话网速好一点的话（最好是在科学上网的情况下）确实是十分钟，但是后面完善特别是我这种追求主题美观（花里胡哨）的人并且喜欢魔改主题又费了老大劲了，也是踩坑无数，主题魔改可单独一篇讲。</p><h2 id="三、发布文章"><a href="#三、发布文章" class="headerlink" title="三、发布文章"></a>三、发布文章</h2><p>发布一篇文章可以用命令<br>    $ hexo new  &lt;标题&gt;<br>但是强烈推荐里用Typora软件直接写拖到soruce的_posts文件夹里，这个文件夹是专门放你的博客文章的，但是只是放进去在网上还是不能看到你的文章，用命令生成网页在这之前最好先清理缓存</p><pre><code>$ hexo clean$ hexo g</code></pre><p>你可以先预览一下</p><pre><code>$ hexo s</code></pre><p>和之前一样在浏览器上输入<code>locahost:4000</code>就可以看到你的文章</p><p>现在只是在本地能看到想要传到网上首先你需要在之前创建的<code>blog</code>文件夹里面找到<code>_config.yml</code>这个站点配置文件</p><p>打开滑倒最下面找到deploy下面的<code>type</code>后面写上git （注意type和git之间一点要有空格）</p><p>然后就可以部署到github上去，输入如下命令</p><pre><code> $ hexo d</code></pre><h2 id="四、主题配置"><a href="#四、主题配置" class="headerlink" title="四、主题配置"></a>四、主题配置</h2><p>你可能对默认的主题很不满意，你可以去<a href="">hexo的主题库</a>去挑选，下载的话建议直接点进github克隆主题仓库下载快一点，下载好之后将文件解压把文件发在theme这个文件夹里，然后点进根目录也就是刚才的<strong><code>blog</code></strong>文件下的站点配置文件–config.yml里找到theme  在后面修改为你刚刚下载的主题文件夹名（也要注意theme和主题名之间的空格）</p><p>还有我的博客是主题目前是<code>matery</code> 想看可以点<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
